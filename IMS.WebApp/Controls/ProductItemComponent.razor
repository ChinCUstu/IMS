@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase
@inject IJSRuntime JSRuntime

@if (Product != null)
{
    <tr>
        <td>@Product.ProductName</td>
        <td>@Product.Price.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@(()=> EditProduct(Product.ProductId))">Modifier</button>
            <button type="button" class="btn btn-light" @onclick="@(async ()=> await DeleteProduct(Product))">Supprimer</button>
        </td>
    </tr>    
}


@code {

    [Parameter]
    public Product? Product { get; set; }

    [Parameter]
    public EventCallback OnProductDeleted { get; set; }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/editproduct/{productId}");
    }

    private async Task DeleteProduct(Product product)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this client '{product.ProductName}'?");
        if (confirmed)
        {
            await DeleteProductUseCase.ExecuteAsync(product.ProductId);

            await OnProductDeleted.InvokeAsync();
        }
    }

}
