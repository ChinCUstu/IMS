@page "/addclient"
@using IMS.UseCases.Clients

@inject IAddClientUseCase AddClientUseCase
@inject NavigationManager NavigationManager

<h3>Ajouter un Client</h3>
<br/>
@if (client != null)
{
    <EditForm Model="client" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="name">Nom</label>
            <InputText id="name" @bind-Value="client.ClientName" class="form-control"/>
        </div>

        <div class="form-group">
            <label for="contactInfo">Address</label>
            <InputText id="contactInfo" @bind-Value="client.ContactInfo" class="form-control"/>
        </div>
        
        <div class="form-group">
            <label for="phoneNumber">Numéro de téléphone</label>
            <InputText id="phoneNumber" @bind-Value="client.PhoneNumber" class="form-control"/>
        </div>
        <div class="form-group">
            <label for="preferredPaymentMethod">Méthode de paiement préférée</label>
            <InputSelect id="preferredPaymentMethod" @bind-Value="client.PreferredPaymentMethod" class="form-control">
                <option value="">Sélectionnez une option</option>
                <option value="PayPal">PayPal</option>
                <option value="Mobile Money">Mobile Money</option>
                <option value="Bank Transfer">Bank Transfer</option>
                <option value="Cash on Delivery">Cash on Delivery</option>
            </InputSelect>
        </div>

        <br/>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
    </EditForm>
}

@code {
    private Client? client;
    
    protected override void OnInitialized()
    {
        client = new Client();
    }

    private async Task OnValidSubmit()
    {
        if (client != null)
        {
            await AddClientUseCase.ExecuteAsync(client);
            NavigationManager.NavigateTo("/clients");
        }
    }

}