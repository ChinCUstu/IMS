@page "/addproduct"

@attribute [Authorize]

@using IMS.Plugins.EFCore
@using IMS.UseCases.PluginInterfaces;

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager
@inject IMSContext DbContext
@inject IInventoryRepository InventoryRepository

<h3>Ajouter un produit</h3>
<br/>

@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Nom de Produit</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="qty">Quantité</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="price">Prix</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <br/>
        <div class="form-group">
            <div class="checkbox-group">
                <label for="canBeProduced">Produced</label>
                <InputCheckbox id="canBeProduced" @bind-Value="product.CanBeProduced" @onchange="OnProducedChanged"></InputCheckbox>
            </div>
            <div class="checkbox-group">
                <label for="sold">Sold</label>
                <InputCheckbox id="sold" @bind-Value="product.Sold" @onchange="OnSoldChanged"></InputCheckbox>
            </div>
            <div class="checkbox-group">
                <label for="bought">Bought</label>
                <InputCheckbox id="bought" @bind-Value="product.Bought" @onchange="OnBoughtChanged"></InputCheckbox>
            </div>
            <div class="checkbox-group">
                <label for="material">Material</label>
                <InputCheckbox id="material" @bind-Value="product.Material" @onchange="OnMaterialChanged"></InputCheckbox>
            </div>
        </div>
        <br/>
        @if (product.CanBeProduced)
        {
            <ProductInventoriesComponent
                @ref="ProductInventoriesComponent"
                OnInventorySelected="OnInventorySelected">
            </ProductInventoriesComponent>
            <ProductEquipmentsComponent
                @ref="ProductEquipmentsComponent"
                OnEquipmentSelected="OnEquipmentSelected">
            </ProductEquipmentsComponent>
        }
        @if (product.Sold)
        {
            <div class="form-group">
                <label for="sellingPrice">Selling Price</label>
                <InputNumber id="sellingPrice" @bind-Value="product.SellingPrice" class="form-control"></InputNumber>
            </div>
        }
        <br/>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
    </EditForm>
}

@code {
    private Product? product;
    private Equipment? equipment;
    private ProductInventoriesComponent? ProductInventoriesComponent;
    private ProductEquipmentsComponent? ProductEquipmentsComponent;
    private InventoryItemComponent InventoryItemComponent;

    protected override void OnInitialized()
    {
        product = new Product();
        equipment = new Equipment();
    }


    private async Task OnValidSubmit()
    {
        if (product != null)
        {
            product.Sold = product.Sold;
            product.Bought = product.Bought;
            product.Material = product.Material;

            if (ProductInventoriesComponent != null && ProductEquipmentsComponent != null)
            {
                ProductInventoriesComponent.ProductInventories.ForEach(x => { x.ProductId = product.ProductId; });
                ProductEquipmentsComponent.ProductEquipments.ForEach(x => { x.ProductId = product.ProductId; });
            }
            if (product.Material)
            {
                var inventory = new Inventory { InventoryName = product.ProductName, Quantity = product.Quantity, Price = product.Price};
                await InventoryRepository.AddInventoryAsync(inventory);
                await DbContext.SaveChangesAsync();
            }
            await AddProductUseCase.ExecuteAsync(product);
            NavigationManager.NavigateTo("/products");
        }
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        product.ProductInventories = productInventories;
    }

    private void OnEquipmentSelected(List<ProductEquipment> productEquipments)
    {
        product.ProductEquipments = productEquipments;
    }

    private void OnProducedChanged(ChangeEventArgs e)
    {
        product.CanBeProduced = (bool)e.Value;
    }

    private void OnSoldChanged(ChangeEventArgs e)
    {
        product.Sold = (bool)e.Value;
    }

    private void OnBoughtChanged(ChangeEventArgs e)
    {
        product.Bought = (bool)e.Value;
    }

    private void OnMaterialChanged(ChangeEventArgs e)
    {
        product.Material = (bool)e.Value;
    }
}